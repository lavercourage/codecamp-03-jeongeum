// container
import CommentListUI from "./CommentList.presenter";
import { FETCH_BOARD_COMMENTS } from "./CommentList.queries";
import { useQuery } from "@apollo/client";
import { useRouter } from "next/router";

export default function CommentList() {
  const router = useRouter();
  const { data } = useQuery(FETCH_BOARD_COMMENTS, {
    variables: { boardId: router.query.id },
  });

  return <CommentListUI data={data} />;
}

//presenter
import { useQuery } from "@apollo/client";
import CommentListUIItem from "./CommentList.presenterItem";
import { FETCH_BOARD_COMMENTS } from "./CommentList.queries"; // 댓글 조회 query import
import InfiniteScroll from "react-infinite-scroller";
import { useRouter } from "next/router";

export default function CommentListUI(props) {
  const router = useRouter();
  const { data, fetchMore } = useQuery(FETCH_BOARD_COMMENTS, {
    variables: { boardId: router.query.id },
  });

  function onLoadCommentMore() {
    if (!data) return;
    fetchMore({
      // fetchMore를 만나면 추가로 데이터 요청됨. 요청된 데이터는 아래 fetchMoreResult에 들어온다.
      variables: { page: Math.ceil(data?.fetchBoardComments.length / 10) + 1 }, // ! fetchMore 할때는 variables에 boardId 안넣어도 된다.
      updateQuery: (prev, { fetchMoreResult }) => {
        return {
          fetchBoardComments: [
            ...prev.fetchBoardComments,
            ...fetchMoreResult.fetchBoardComments,
          ],
        };
      },
    });
  }
  if (!props.data?.fetchBoardComments) return <></>;
  return (
    <InfiniteScroll pageStart={0} loadMore={onLoadCommentMore} hasMore={true}>
      {props.data?.fetchBoardComments.map((el) => (
        <CommentListUIItem key={el._id} el={el} />
      ))}
    </InfiniteScroll>
  );
}

//presenterItem
import { useRouter } from "next/router";
import { FETCH_BOARD_COMMENTS } from "./CommentList.queries";
import { gql, useMutation } from "@apollo/client";
import { useState } from "react";
import CommentWrite from "../comment/CommentWrite.container";
import {
  Wrapper,
  CommentWrapper,
  Comment,
  ProfileImg,
  CommentInfo,
  CommentWriterAndRating,
  CommentWriter,
  CommentRating,
  CommentContent,
  CommentDate,
  CommentButtons,
  CommentEditBtn,
  CommentDeleteBtn,
  StarRating,
} from "./CommentList.styles";

const DELETE_COMMENT = gql`
  mutation deleteBoardComment($password: String, $boardCommentId: ID!) {
    deleteBoardComment(password: $password, boardCommentId: $boardCommentId)
  }
`;

export default function CommentListUIItem(props) {
  const router = useRouter();
  const [isEdit, setIsEdit] = useState(false);
  const [deleteBoardComment] = useMutation(DELETE_COMMENT);
  const [myPassword, setMyPassword] = useState("");
  // const [myStar, setMyStar] = useState(0)

  async function onClickEditComment() {
    setIsEdit(true);
  }

  async function onClickDeleteComment(event) {
    const myPassword = prompt("비밀번호를 입력해주세요.");
    try {
      await deleteBoardComment({
        variables: {
          password: myPassword,
          boardCommentId: event.target.id,
        },
        refetchQueries: [
          {
            query: FETCH_BOARD_COMMENTS,
            variables: { boardId: router.query.id },
          },
        ],
      });
    } catch (error) {
      alert(error.message);
    }
  }

  return (
    <>
      {/* 수정하기 누르기 전, 댓글상세 UI */}
      {!isEdit && (
        <Wrapper>
          <CommentWrapper key={props.el._id}>
            <Comment>
              <ProfileImg src="/images/profile.png" />
              <CommentInfo>
                <CommentWriterAndRating>
                  <CommentWriter>{props.el.writer}</CommentWriter>
                  <CommentRating>
                    <StarRating value={props.el.rating} disabled />
                  </CommentRating>
                </CommentWriterAndRating>
                <CommentContent>{props.el.contents}</CommentContent>
                <CommentDate>{props.el.createdAt.slice(0, 10)}</CommentDate>
              </CommentInfo>
            </Comment>
            <CommentButtons>
              <CommentEditBtn
                src="/images/edit.png"
                onClick={onClickEditComment}
                id={props.el._id}
              ></CommentEditBtn>
              <CommentDeleteBtn
                onClick={onClickDeleteComment}
                src="/images/delete.png"
                id={props.el._id}
              ></CommentDeleteBtn>
            </CommentButtons>
          </CommentWrapper>
        </Wrapper>
      )}
      {/* 수정하기 눌렀을 때, 댓글수정 (댓글등록component 재사용!!) */}
      {isEdit && (
        <CommentWrite
          isEdit={isEdit}
          setIsEdit={setIsEdit} // 수정하기 버튼을 누르면 setIsEdit로 이 파일의 state를 바꿔서 댓글상세가 보이는 걸로 바꿔야함!!
          el={props.el} // 수정하기에서 defaultValue 주기위해
        />
      )}
    </>
  );
}

//queries
import { gql } from "@apollo/client";

export const FETCH_BOARD_COMMENTS = gql`
  query fetchBoardComments($boardId: ID!, $page: Int) {
    fetchBoardComments(boardId: $boardId, page: $page) {
      _id
      writer
      contents
      rating
      createdAt
    }
  }
`;

//styles
import styled from "@emotion/styled";
import { Rate } from "antd";

export const StarRating = styled(Rate)`
  pointer-events: none;
`;

export const Wrapper = styled.div`
  width: 1200px;
  /* padding-top: 20px; */
`;
export const CommentWrapper = styled.div`
  display: flex;
  justify-content: space-between;
  border-bottom: 1px solid #bdbdbd;
  padding: 20px 5px 20px 5px;
`;
export const Comment = styled.div`
  display: flex;
`;
export const ProfileImg = styled.img`
  width: 40px;
  height: 40px;
  margin-top: 6px;
`;
export const CommentInfo = styled.div`
  margin-left: 16px;
`;
export const CommentWriterAndRating = styled.div`
  display: flex;
  align-items: center;
`;
export const CommentWriter = styled.div`
  font-weight: 500;
  font-size: 16px;
`;
export const CommentRating = styled.div`
  padding-left: 18px;
`;
export const CommentContent = styled.div`
  font-size: 16px;
  padding-top: 4px;
  color: #4f4f4f;
`;
export const CommentDate = styled.div`
  color: #bdbdbd;
  font-size: 12px;
  padding-top: 20px;
`;
export const CommentButtons = styled.div`
  display: flex;
  align-items: center;
  height: 20px;
`;
export const CommentEditBtn = styled.img`
  border: none;
  background-color: transparent;
  cursor: pointer;
`;
export const CommentDeleteBtn = styled.img`
  border: none;
  background-color: transparent;
  cursor: pointer;
  margin-left: 16px;
`;
